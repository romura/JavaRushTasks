<div class="wdghtml" taskKey="com.javarush.task.task28.task2802">
<h3>Пишем свою ThreadFactory</h3>
<p>В классе <span class="text-corporate"><strong>Solution</strong></span> создай публичный статический класс <span class="text-corporate"><strong>AmigoThreadFactory</strong></span>, реализующий интерфейс <strong><span class="text-yellow">ThreadFactory</span></strong>.<br />
1. Реализация интерфейсного метода &#8212; создайте и верните трэд, который должен:<br />
1.1. не быть демоном,<br />
1.2. иметь нормальный приоритет,<br />
1.3. имя трэда должно иметь шаблон &#171;<em><strong>GN-pool-A-thread-B</strong></em>&#171;,<br />
где <mark class="user">GN</mark> &#8212; это имя группы,<br />
<mark class="user">A</mark> &#8212; это номер фабрики инкрементируется в пределах класса начиная с 1, используйте <span class="text-corporate"><strong>AtomicInteger</strong></span>,<br />
<mark class="user">B</mark> &#8212; номер треда инкрементируется в пределах конкретной фабрики начиная с 1, используйте <span class="text-corporate"><strong>AtomicInteger</strong></span>.<br />
2. Каждая фабрика должна иметь ту группу тредов (<em>ThreadGroup</em>), в которой она была создана.<br />
3. Методы <mark>main</mark> и <mark>emulateThreadFactory</mark> не участвуют в тестировании.</p>
<p><strong>Пример вывода:</strong><br />
<code>secondGroup-pool-2-thread-1<br />
firstGroup-pool-1-thread-1<br />
firstGroup-pool-1-thread-3<br />
secondGroup-pool-2-thread-3<br />
firstGroup-pool-1-thread-2<br />
secondGroup-pool-2-thread-2</code></p>

</div>
